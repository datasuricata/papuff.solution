// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using papuff.datainfra.ORM;

namespace papuff.datainfra.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Core")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("papuff.domain.Core.Ads.Advertising", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentUri");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("RedirectUri");

                    b.Property<string>("Title");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Advertising");
                });

            modelBuilder.Entity("papuff.domain.Core.Companies.Company", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("papuff.domain.Core.Generals.Document", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CompanyId");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("ImageUri");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("UserId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("papuff.domain.Core.Generals.Favorite", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("Like");

                    b.Property<decimal>("Rate");

                    b.Property<string>("SiegeId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SiegeId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("papuff.domain.Core.Generals.General", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BirthDate");

                    b.Property<string>("CompanyId");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Stage");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("General");
                });

            modelBuilder.Entity("papuff.domain.Core.Sieges.Siege", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdvertisingId");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Range");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<int>("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("AdvertisingId");

                    b.ToTable("Siege");
                });

            modelBuilder.Entity("papuff.domain.Core.Users.Address", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine");

                    b.Property<int>("Building");

                    b.Property<string>("City");

                    b.Property<string>("CompanyId");

                    b.Property<int>("Complement");

                    b.Property<string>("Country");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("District");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Number");

                    b.Property<string>("PostalCode");

                    b.Property<string>("StateProvince");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("papuff.domain.Core.Users.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<string>("Email");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Nick");

                    b.Property<string>("Password");

                    b.Property<string>("SiegeId");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("SiegeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("papuff.domain.Core.Users.Wallet", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Account");

                    b.Property<string>("Agency");

                    b.Property<DateTimeOffset?>("CreatedAt");

                    b.Property<int>("DateDue");

                    b.Property<string>("Document");

                    b.Property<bool>("IsDefault");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Type");

                    b.Property<DateTimeOffset?>("UpdatedAt");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Wallet");
                });

            modelBuilder.Entity("papuff.domain.Core.Generals.Document", b =>
                {
                    b.HasOne("papuff.domain.Core.Companies.Company")
                        .WithMany("Documents")
                        .HasForeignKey("CompanyId");

                    b.HasOne("papuff.domain.Core.Users.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("papuff.domain.Core.Generals.Favorite", b =>
                {
                    b.HasOne("papuff.domain.Core.Sieges.Siege", "Siege")
                        .WithMany()
                        .HasForeignKey("SiegeId");

                    b.HasOne("papuff.domain.Core.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("papuff.domain.Core.Generals.General", b =>
                {
                    b.HasOne("papuff.domain.Core.Companies.Company", "Company")
                        .WithOne("General")
                        .HasForeignKey("papuff.domain.Core.Generals.General", "CompanyId");

                    b.HasOne("papuff.domain.Core.Users.User", "User")
                        .WithOne("General")
                        .HasForeignKey("papuff.domain.Core.Generals.General", "UserId");
                });

            modelBuilder.Entity("papuff.domain.Core.Sieges.Siege", b =>
                {
                    b.HasOne("papuff.domain.Core.Ads.Advertising", "Advertising")
                        .WithMany()
                        .HasForeignKey("AdvertisingId");
                });

            modelBuilder.Entity("papuff.domain.Core.Users.Address", b =>
                {
                    b.HasOne("papuff.domain.Core.Companies.Company", "Company")
                        .WithOne("Address")
                        .HasForeignKey("papuff.domain.Core.Users.Address", "CompanyId");

                    b.HasOne("papuff.domain.Core.Users.User", "User")
                        .WithOne("Address")
                        .HasForeignKey("papuff.domain.Core.Users.Address", "UserId");
                });

            modelBuilder.Entity("papuff.domain.Core.Users.User", b =>
                {
                    b.HasOne("papuff.domain.Core.Sieges.Siege")
                        .WithMany("Users")
                        .HasForeignKey("SiegeId");
                });

            modelBuilder.Entity("papuff.domain.Core.Users.Wallet", b =>
                {
                    b.HasOne("papuff.domain.Core.Users.User", "User")
                        .WithMany("Wallets")
                        .HasForeignKey("UserId");
                });
#pragma warning restore 612, 618
        }
    }
}
